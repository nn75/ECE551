#include <cstdio>
#include <cstdlib>
#include <iostream>

#include "map.h"

template<typename K, typename V>
class BstMap : public Map<K, V>
{
 private:
  class Node
  {
   public:
    K key;
    V value;
    Node * left;
    Node * right;
    Node(const K & k, const V & v) : key(k), value(v), left(NULL), right(NULL) {}
  };
  Node * root;

 public:
  BstMap() : root(NULL) {}

  //Copy constructor.
  Node * copy(const Node * n) {
    if (n == NULL) {
      return NULL;
    }
    Node * newNode = new Node(n->key, n->value);
    if (n->left != NULL) {
      newNode->left = copy(n->left);
    }
    if (n->right != NULL) {
      newNode->right = copy(n->right);
    }
    return newNode;
  }
  BstMap(const BstMap<K, V> & rhs) : root(NULL) { root = copy(rhs.root); }
  BstMap<K, V> & operator=(const BstMap<K, V> & rhs) {
    if (this != &rhs) {
      destroy(root);
      root = copy(rhs.root);
    }
    return *this;
  }

  //Add
  virtual void add(const K & key, const V & value) {
    Node * curr = root;
    Node * toAdd = new Node(key, value);
    while (curr != NULL) {
      if (key < curr->key) {
        if (curr->left == NULL) {
          curr->left = toAdd;
          return;
        }
        else {
          curr = curr->left;
        }
      }
      else if (key > curr->key) {
        if (curr->right == NULL) {
          curr->right = toAdd;
          return;
        }
        else {
          curr = curr->right;
        }
      }
      else {
        curr->value = value;
        delete toAdd;
        return;
      }
    }
    curr = toAdd;
  }

  //Lookup
  virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
    Node * curr = root;
    while (curr != NULL) {
      if (key == curr->key) {
        return curr->value;
      }
      else if (key < curr->key) {
        curr = curr->left;
      }
      else {
        curr = curr->right;
      }
    }
    throw std::invalid_argument("Not found.");
  }

  //Remove
  virtual void remove(const K & key) {
    Node * curr = root;
    Node * parent = root;
    while (curr != NULL) {
      if (curr->key < key) {
        if (curr->right == NULL) {
          exit(EXIT_FAILURE);
        }
        else {
          parent = curr;
          curr = curr->right;
        }
      }
      else if (curr->key > key) {
        if (curr->left == NULL) {
          exit(EXIT_FAILURE);
        }
        else {
          parent = curr;
          curr = curr->left;
        }
      }
      else {
        if (curr->left == NULL && curr->right == NULL) {
          if (parent->left == curr) {
            parent->left = NULL;
          }
          else if (parent->right == curr) {
            parent->right = NULL;
          }
          else {
            root = NULL;
          }
          delete curr;
        }
        else if (curr->left == NULL && curr->right != NULL) {
          if (parent->left == curr) {
            parent->left = curr->right;
          }
          else if (parent->right == curr) {
            parent->right = curr->right;
          }
          else {
            root = curr->right;
          }
          delete curr;
        }
        else if (curr->left != NULL && curr->right == NULL) {
          if (parent->right == curr) {
            parent->right = curr->left;
          }
          else if (parent->left == curr) {
            parent->left = curr->left;
          }
          else {
            root = curr->left;
          }
          delete curr;
        }
        else {
          Node * temp = curr->left;
          Node * temp_parent = temp;
          while (temp->right != NULL) {
            temp_parent = temp;
            temp = temp->right;
          }
          if (temp_parent == temp) {
            temp->right = curr->right;
            if (parent->left == curr) {
              parent->left = temp;
            }
            else if (parent->right == curr) {
              parent->right = temp;
            }
            else {
              root = curr->left;
            }
          }
          else {
            temp_parent->right = temp->right;
            temp->left = curr->left;
            temp->right = curr->right;
            if (parent->left == curr) {
              parent->left = temp;
            }
            else if (parent->right == curr) {
              parent->right = temp;
            }
            else {
              root = curr->left;
            }
          }
          delete curr;
        }
      }
    }
  }
  virtual ~BstMap<K, V>() { destroy(root); }
  void destroy(Node * n) {
    if (n != NULL) {
      destroy(n->left);
      destroy(n->right);
      delete n;
    }
  }
  void printInorder(Node * n) {
    if (n != NULL) {
      printInorder(n->left);
      std::cout << n->key << " " << std::endl;
      printInorder(n->right);
    }
  }
  Node * getRoot() { return root; }
};
